version: 2.1

pull_requests_only: &pull_requests_only
  filters:
    branches:
      ignore:
        - main
        - develop

commands:
  login: 
    description: "Logs in GCP & Pulumi & Docker"
    steps:
      - run:
          name: Login 
          command: |
            echo "$GCP_SERVICE_ACCOUNT_KEY" > /tmp/gcp-service-account-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-service-account-key.json

            # for this non-interactive command to work PULUMI_ACCESS_TOKEN must exist an env var
            pulumi login --non-interactive

            # docker login is needed by Pulumi up when doing new docker.Image()
            cat $GOOGLE_APPLICATION_CREDENTIALS | docker login -u _json_key --password-stdin https://us-central1-docker.pkg.dev


  load_workflow_paths:
    description: "Loads the workflow paths"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load WORKFLOW_PATH Variables
          command: |
            . workflow_paths.env
            # Now you can use the variables like $WORKFLOW_PATH_backend1
            echo "Cat workflow_paths.env"
            cat workflow_paths.env

  deploy_to_gcp:
    parameters:
      serviceName:
        type: string
    steps:
      - run: echo "Parameter 1 is << parameters.serviceName >>"
      - run:
          name: Deploy to GCP
          command: |

            cd infra/shared

            pulumi stack select --create shared
            pulumi up --yes

            cd ../preview
            pulumi stack select --create ${CIRCLE_BRANCH}

            if [ "$WORKFLOW_PATH" = "deploy" ]; then
              echo "creating preview...."
              # pulumi config set pulumi-tests:branch ${CIRCLE_BRANCH}
              pulumi config set branch ${CIRCLE_BRANCH}
              pulumi config set serviceName << parameters.serviceName >>
              pulumi up --yes --debug
              URL=$(pulumi stack output url --stack ${CIRCLE_BRANCH})
              echo "URL= $URL"
            elif [ "$WORKFLOW_PATH" = "use-existing" ]; then
              echo "use-existing"
              URL=$(pulumi stack output url --stack ${CIRCLE_BRANCH})
              echo "URL= $URL"
            elif [ "$WORKFLOW_PATH" = "default-service" ]; then
              echo "default-service"
              cd ../default-preview
              URL=$(pulumi stack output url --stack default-preview)
              echo "URL= $URL"
            fi

            cd ../../

            export SERVICE_URL=$URL
            echo "$SERVICE_URL" >> service_url.txt
      - persist_to_workspace:
          root: .
          paths:
            - service_url.txt

jobs:
  determine_workflow_path:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout
      - run:
          name: Determine workflow path for each backend
          command: |
            # List backends
            BACKENDS="backend1 backend2"  

            for BACKEND in $BACKENDS; do
              if git diff --name-only HEAD^ HEAD | grep -q "$BACKEND/"; then
                echo "export WORKFLOW_PATH_${BACKEND}=\"deploy\"" >> $BASH_ENV
              elif git diff --name-only origin/main...$CIRCLE_BRANCH | grep -q "$BACKEND/"; then
                echo "export WORKFLOW_PATH_${BACKEND}=\"use-existing\"" >> $BASH_ENV
              else
                echo "export WORKFLOW_PATH_${BACKEND}=\"default-service\"" >> $BASH_ENV
              fi
            done
      - run:
          name: Save WORKFLOW_PATH Variables
          command: |
            mkdir -p /tmp/workspace
            env | grep WORKFLOW_PATH_ > workflow_paths.env
      - persist_to_workspace:
          root: .
          paths:
            - workflow_paths.env

  build-and-deploy-preview:
    docker:
      - image: pulumi/pulumi:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Dependencies
          command: |
            npm install
      - load_workflow_paths
      - login
      - deploy_to_gcp:
          serviceName: "backend1"
      # - deploy_to_gcp:
      #     serviceName: "backend2"

  tests:
    docker:
      - image: pulumi/pulumi:latest
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: |
            echo "cat service_url.txt"
            cat service_url.txt
            SERVICE_URL=$(cat service_url.txt)
            echo "URL IN TESTS = $SERVICE_URL"
   
  update-on-pr-merge:
    docker:
      - image: pulumi/pulumi:latest
    steps:
      - checkout
      - setup_remote_docker
      - login
      - run:
          name: Install Dependencies
          command: |
            npm install
      - run: 
          name: Update default-preview on merge
          command: |
            # on merge, update default-preview with the merged
            cd infra/default-preview
            pulumi stack select --create default-preview
            pulumi up --yes --debug
      - run: 
          name: Destroy resources and delete stack for merged branch 
          command: |
            # on merge, delete resources created for preview

            git fetch --all
          
            # List branches merged into main
            MERGED_BRANCHES=$(git branch -r --merged origin/main | grep -v 'origin/main$' | sed 's/origin\///')
            echo MERGED_BRANCHES=
            echo $MERGED_BRANCHES

            cd infra/preview
            
            # Loop over the list and perform cleanup. if they are merged they should be deleted
            for stack in $MERGED_BRANCHES; do
              echo "Trying stack=$stack"
              if pulumi stack ls | grep -q $stack; then
                  echo "Deleting stack: $stack"
                  pulumi stack select $stack
                  pulumi destroy --stack skaparelos/pulumi-tests/$stack --yes
                  pulumi stack rm skaparelos/pulumi-tests/$stack --yes
              else
                  echo "Stack $stack does not exist, skipping."
              fi
            done

            # fetch list with pulumi stacks
            stacks=$(pulumi stack ls --json | grep -E '"name": "(pmbt-|pea-)' | cut -d '"' -f 4)
            echo "stacks="
            echo $stacks

            # Check if any stack is in the list of merged branches and delete it
            for stack in $stacks; do
              if echo $MERGED_BRANCHES | grep "$stack"; then
                echo "Deleting stack: $stack"
                pulumi stack select $stack
                pulumi destroy --stack skaparelos/pulumi-tests/$stack --yes
                pulumi stack rm skaparelos/pulumi-tests/$stack --yes
              fi
            done

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - determine_workflow_path:
          <<: *pull_requests_only
      - build-and-deploy-preview:
          <<: *pull_requests_only
          requires:
            - determine_workflow_path
      - tests:
          <<: *pull_requests_only
          requires:
            - build-and-deploy-preview
      - update-on-pr-merge:
           filters:
            branches:
              only: main
