version: 2.1

pull_requests_only: &pull_requests_only
  filters:
    branches:
      ignore:
        - main
        - develop

commands:
  login: 
    description: "Logs in GCP & Pulumi & Docker"
    steps:
      - run:
          name: Login 
          command: |
            echo "$GCP_SERVICE_ACCOUNT_KEY" > /tmp/gcp-service-account-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-service-account-key.json

            # for this non-interactive command to work PULUMI_ACCESS_TOKEN must exist an env var
            pulumi login --non-interactive

            # docker login is needed by Pulumi up when doing new docker.Image()
            cat $GOOGLE_APPLICATION_CREDENTIALS | docker login -u _json_key --password-stdin https://us-central1-docker.pkg.dev

  determine_workflow_path:
    description: "Determine the workflow path based on git diffs"
    steps:
      - run:
          name: Determine workflow path
          command: |
            if git diff --name-only HEAD^ HEAD | grep -q "backend1/"; then
              echo 'export WORKFLOW_PATH="deploy"' >> $BASH_ENV
            elif git diff --name-only origin/main...$CIRCLE_BRANCH | grep -q "backend1/"; then
              echo 'export WORKFLOW_PATH="use-existing"' >> $BASH_ENV
            else
              echo 'export WORKFLOW_PATH="default-service"' >> $BASH_ENV
            fi

jobs:
  build-and-deploy-preview:
    docker:
      - image: pulumi/pulumi:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Dependencies
          command: |
            npm install
      - determine_workflow_path
      - run:
          name: Deploy to GCP
          command: |

            echo "$GCP_SERVICE_ACCOUNT_KEY" > /tmp/gcp-service-account-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-service-account-key.json

            # for this non-interactive command to work PULUMI_ACCESS_TOKEN must exist an env var
            pulumi login --non-interactive

            # docker login is needed by Pulumi up when doing new docker.Image()
            cat $GOOGLE_APPLICATION_CREDENTIALS | docker login -u _json_key --password-stdin https://us-central1-docker.pkg.dev

            cd infra/shared
            pulumi stack select --create shared
            pulumi up --yes

            cd ../preview
            pulumi stack select --create ${CIRCLE_BRANCH}

            if [ "$WORKFLOW_PATH" = "deploy" ]; then
              echo "creating preview...."
              # pulumi config set pulumi-tests:branch ${CIRCLE_BRANCH}
              pulumi config set branch ${CIRCLE_BRANCH}
              pulumi up --yes --debug
            elif [ "$WORKFLOW_PATH" = "use-existing" ]; then
              echo "use-existing"
              URL=$(pulumi stack output url --stack ${CIRCLE_BRANCH})
              echo "URL= $URL"
            elif [ "$WORKFLOW_PATH" = "default-service" ]; then
              echo "default-service"
              # cd infra/default-preview
              # URL=$(pulumi stack output url --stack default-preview)
              # echo "URL= $URL"
            fi

            cd ../

            # pulumi up --yes --json > pulumi-output.json
            # echo "cat pulumi-output.json"
            # cat pulumi-output.json

  update-on-pr-merge:
    docker:
      - image: pulumi/pulumi:latest
    steps:
      - checkout
      - setup_remote_docker
      - login
      - run:
          name: Install Dependencies
          command: |
            npm install
      - run: 
          name: Update default-preview on merge
          command: |
            # on merge, update default-preview with the merged
            cd infra/default-preview
            pulumi stack select --create default-preview
            pulumi up --yes --debug
      - run: 
          name: Destroy resources for merged branch
          command: |
            # on merge, delete resources created 
            git checkout main
            git fetch
            cd ../preview
            # List branches merged into main
            MERGED_BRANCHES=$(git branch --merged main | grep -v '^\*' | tr -d '[:space:]')

            # Loop over the list and perform cleanup
            for branch in $MERGED_BRANCHES; do
              # Perform your cleanup commands here, for example:
              echo "Trying branch=$branch"
              pulumi stack select $branch
              pulumi destroy --stack skaparelos/pulumi-tests/$branch --yes
            done
            # pulumi stack select ${CIRCLE_BRANCH}
            # pulumi destroy --stack skaparelos/pulumi-tests/${CIRCLE_BRANCH} --yes

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-and-deploy-preview:
          <<: *pull_requests_only
      - update-on-pr-merge:
           filters:
            branches:
              only: main
